name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, qa, uat, releaseTest, release ]
  pull_request:
    branches: [ main, develop, qa, uat, releaseTest, release ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_REGISTRY: docker.io
  DOCKERHUB_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/collatz-data-science
  # Database configuration
  POSTGRES_DB: collatz_db_test
  POSTGRES_USER: postgresql
  POSTGRES_PASSWORD: test_password
  DB_HOST: localhost
  DB_PORT: 5432
  DB_URL: postgresql://postgresql:test_password@localhost:5432/collatz_db_test

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: collatz_db_test
          POSTGRES_USER: postgresql
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check if tests and source files exist
      run: |
        TESTS_EXIST=false
        SRC_EXIST=false
        
        if [ -d "tests" ] && [ -n "$(find tests -name '*.py' -type f)" ]; then
          TESTS_EXIST=true
          echo "Test files found in tests directory."
        else
          echo "No test files found in tests directory."
        fi
        
        if [ -d "src" ] && [ -n "$(find src -name '*.py' -type f)" ]; then
          SRC_EXIST=true
          echo "Source files found in src directory."
        else
          echo "No source files found in src directory."
        fi
        
        if [ "$TESTS_EXIST" = false ] && [ "$SRC_EXIST" = false ]; then
          echo "No tests or source files found. Skipping test job."
          exit 0
        fi
        
        echo "TESTS_EXIST=$TESTS_EXIST" >> $GITHUB_ENV
        echo "SRC_EXIST=$SRC_EXIST" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort mypy
    
    - name: Set up test database
      env:
        PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        psql -h ${{ env.DB_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f sql/01_create_tables.sql
        psql -h ${{ env.DB_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f sql/02_create_indexes.sql
        psql -h ${{ env.DB_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f sql/03_create_views.sql
        psql -h ${{ env.DB_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f sql/04_create_functions.sql
    
    - name: Lint with flake8
      if: env.TESTS_EXIST == 'true' || env.SRC_EXIST == 'true'
      run: |
        DIRS=""
        if [ "$SRC_EXIST" = "true" ]; then DIRS="$DIRS src/"; fi
        if [ "$TESTS_EXIST" = "true" ]; then DIRS="$DIRS tests/"; fi
        if [ -n "$DIRS" ]; then
          flake8 $DIRS --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 $DIRS --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        fi
    
    - name: Check code formatting with black
      if: env.TESTS_EXIST == 'true' || env.SRC_EXIST == 'true'
      run: |
        DIRS=""
        if [ "$SRC_EXIST" = "true" ]; then DIRS="$DIRS src/"; fi
        if [ "$TESTS_EXIST" = "true" ]; then DIRS="$DIRS tests/"; fi
        if [ -n "$DIRS" ]; then
          black --check $DIRS
        fi
    
    - name: Check import sorting with isort
      if: env.TESTS_EXIST == 'true' || env.SRC_EXIST == 'true'
      run: |
        DIRS=""
        if [ "$SRC_EXIST" = "true" ]; then DIRS="$DIRS src/"; fi
        if [ "$TESTS_EXIST" = "true" ]; then DIRS="$DIRS tests/"; fi
        if [ -n "$DIRS" ]; then
          isort --check-only $DIRS
        fi
    
    - name: Type checking with mypy
      if: env.SRC_EXIST == 'true'
      run: mypy src/ --ignore-missing-imports
    
    - name: Run tests with pytest
      if: env.TESTS_EXIST == 'true'
      env:
        DB_NAME: ${{ env.POSTGRES_DB }}
        DB_USER: ${{ env.POSTGRES_USER }}
        DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        # Check if there are actual test scripts in the tests directory
        TEST_SCRIPTS=$(find tests/ -name "test_*.py" -o -name "*_test.py" | wc -l)
        if [ "$TEST_SCRIPTS" -eq 0 ]; then
          echo "No test scripts found in tests/ directory. Skipping pytest."
          exit 0
        fi
        
        COV_ARG=""
        if [ "$SRC_EXIST" = "true" ]; then COV_ARG="--cov=src"; fi
        pytest tests/ -v $COV_ARG --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      if: env.TESTS_EXIST == 'true' && env.SRC_EXIST == 'true'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check if notebooks exist
      run: |
        if [ ! -d "notebooks" ] || [ -z "$(find notebooks -name '*.ipynb' -type f)" ]; then
          echo "No notebook files found in notebooks directory. Skipping notebook tests."
          exit 0
        fi
        echo "Notebook files found. Proceeding with notebook tests."
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for security vulnerabilities
      run: |
        safety check -r requirements.txt
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKERHUB_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata for GitHub Registry
      id: meta-github
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
          type=sha
    
    - name: Extract metadata for Docker Hub
      id: meta-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-dockerhub.outputs.tags }}
        labels: ${{ steps.meta-dockerhub.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Docker image to GHCR
      uses: docker/build-push-action@v5
      if: success()
      continue-on-error: true
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-github.outputs.tags }}
        labels: ${{ steps.meta-github.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notebook-test:
    name: Test Notebooks
    runs-on: ubuntu-latest
    needs: test
    if: github.ref != 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: collatz_db_test
          POSTGRES_USER: postgresql
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nbconvert jupyter
    
    - name: Set up test database
      env:
        PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        psql -h ${{ env.DB_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f sql/01_create_tables.sql
        psql -h ${{ env.DB_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f sql/02_create_indexes.sql
        psql -h ${{ env.DB_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f sql/03_create_views.sql
        psql -h ${{ env.DB_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f sql/04_create_functions.sql
        psql -h ${{ env.DB_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f sql/05_insert_sample_data.sql
    
    - name: Test notebooks
      env:
        DB_NAME: ${{ env.POSTGRES_DB }}
        DB_USER: ${{ env.POSTGRES_USER }}
        DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        find notebooks/ -name "*.ipynb" -exec jupyter nbconvert --to notebook --execute {} \;

  deploy-develop:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Development
      run: |
        echo "Deploying to Development environment..."
        # Add your Development deployment commands here

  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/qa'
    environment: qa
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to QA
      run: |
        echo "Deploying to QA environment..."
        # Add your QA deployment commands here

  deploy-uat:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/uat'
    environment: uat
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to UAT
      run: |
        echo "Deploying to UAT environment..."
        # Add your UAT deployment commands here

  deploy-release-test:
    name: Deploy to Release Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/releaseTest'
    environment: release-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Release Test
      run: |
        echo "Deploying to Release Test environment..."
        # Add your Release Test deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/release' || github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "Deploying to Production environment..."
        # Add your Production deployment commands here

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-develop, deploy-qa, deploy-uat, deploy-release-test, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # Add cleanup commands here if needed
        # Example: docker system prune -f