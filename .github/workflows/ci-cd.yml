name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_REGISTRY: docker.io
  DOCKERHUB_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/collatz-data-science

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: collatz_db_test
          POSTGRES_USER: postgresql
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort mypy
    
    - name: Set up test database
      env:
        PGPASSWORD: test_password
      run: |
        psql -h localhost -U postgresql -d collatz_db_test -f sql/01_create_tables.sql
        psql -h localhost -U postgresql -d collatz_db_test -f sql/02_create_indexes.sql
        psql -h localhost -U postgresql -d collatz_db_test -f sql/03_create_views.sql
        psql -h localhost -U postgresql -d collatz_db_test -f sql/04_create_functions.sql
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: black --check src/ tests/
    
    - name: Check import sorting with isort
      run: isort --check-only src/ tests/
    
    - name: Type checking with mypy
      run: mypy src/ --ignore-missing-imports
    
    - name: Run tests with pytest
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: collatz_db_test
        DB_USER: postgresql
        DB_PASSWORD: test_password
        DB_URL: postgresql://postgresql:test_password@localhost:5432/collatz_db_test
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for security vulnerabilities
      run: |
        safety check -r requirements.txt
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKERHUB_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata for GitHub Registry
      id: meta-github
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Extract metadata for Docker Hub
      id: meta-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ steps.meta-github.outputs.tags }}
          ${{ steps.meta-dockerhub.outputs.tags }}
        labels: |
          ${{ steps.meta-github.outputs.labels }}
          ${{ steps.meta-dockerhub.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notebook-test:
    name: Test Notebooks
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: collatz_db_test
          POSTGRES_USER: postgresql
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nbconvert jupyter
    
    - name: Set up test database
      env:
        PGPASSWORD: test_password
      run: |
        psql -h localhost -U postgresql -d collatz_db_test -f sql/01_create_tables.sql
        psql -h localhost -U postgresql -d collatz_db_test -f sql/02_create_indexes.sql
        psql -h localhost -U postgresql -d collatz_db_test -f sql/03_create_views.sql
        psql -h localhost -U postgresql -d collatz_db_test -f sql/04_create_functions.sql
        psql -h localhost -U postgresql -d collatz_db_test -f sql/05_insert_sample_data.sql
    
    - name: Test notebooks
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: collatz_db_test
        DB_USER: postgresql
        DB_PASSWORD: test_password
        DB_URL: postgresql://postgresql:test_password@localhost:5432/collatz_db_test
      run: |
        find notebooks/ -name "*.ipynb" -exec jupyter nbconvert --to notebook --execute {} \;

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, notebook-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, notebook-test]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # Add cleanup commands here if needed
        # Example: docker system prune -f